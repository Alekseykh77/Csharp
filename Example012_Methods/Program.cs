/* Вид 1 Ничего не возврщают и ничего не принимают
//void Method1()
//{
    Console.WriteLine("Автор Alexey");// - Тело метода 
//}
//Method1(); // Вызываем метод


// Вид 2 Ничего не возвращают, но могут принимать какие-то аргументы
//void Method2(string msg) // void - ключевое слово, Method2 - идентификатор, (string msg): string - тип данных, msg - аргумент
//{
    Console.WriteLine(msg); // - Тело метода; выводим сообщение msg методом Console.WriteLine - это метод(функция) вывода 
//}
//Method2("Текст сообщения");

//void Method21(string msg, int count) // В данном случае два типа данных(string - строка и int - целое число) и два аргумента 
//{
    int i = 0;
    while (i < count)
    {
        Console.WriteLine(msg);
        i++;
    }
//}
// Method21("Текст",4); // Задаем значения аргументов и выводим в тернинале
//Method21(count:4, msg:"Новый текст"); // Использование именованых аргументов, тогда порядок их не важен(count перед msg) 

// Вид 3 Ничего не принимает (аргументы не принимает), но что-то возвращает

//int Method3() // Обязательно указываем тип данных int(что он возвращает)
//{
    return DateTime.Now.Year; // результат - выдает какой сейчас год
//}
//int year = Method3(); // int - тип данных, year - переменная, куда кладем значение(результат работы котрый получили в {}), Method3 - имя метода(идентификатор) 
//Console.WriteLine(year);// Выводит результат в терминале

// Вид 4 Что-то принимает и что-то возвращает*/

//string Method4(int count, string text)
//{
//   int i = 0;
//    string result = String.Empty;
    
//    while (i < count)
//    {
//        result = result + text;
//        i++;
//        }
//        return result;
//}

//string res = Method4(10,"Hello!");
//Console.WriteLine(res);

// Вывод таблицы умножения на экран

//for ( int i = 2; i <= 10; i++)
//{
//    for (int j = 2; j <= 10; j++)
//    {
//        Console.WriteLine($"{i} x {j} = {i * j}");
//    }
//    Console.WriteLine();
//}

// ====== Работа с текстом
// Дан текст. В тексте нужно все пробелы заменть черточками,
// маленькие буквы "к" заменить бльшими "К", а маленькие "с" заменить большими "С".
// Ясна ли задача?

// string text = "- Я думаю, - сказал князь, улыбаясь, - что,"
// + "ежели бы вас послали вместо нашего милого Винценгероде,"
// + "вы бы взяли приступом согласиепрусского короля."
// + "Вы так красноречивы. Выдадите мне чаю?";
// string s = "qwerty"
//             012345 символы строки считаются с 0 "q" - q[0], w[1], e[2], s[3]

// В этой задаче мы будем использовать четыертый тип методов

// string Replace(string text, char oldValue, char newValue) 
// {
//     string result = String.Empty; // иницилизируем пустую строку
    
//     int length = text.Length; // показывает количество символов в сторке
//     for (int i = 0; i < length; i++) // пробегаемся с помощью цикла от нулевого символа строки до конца строки
//     {
//         if(text[i] == oldValue) result = result + $"{newValue}"; // Если текущий символ совпал с тем котрый мы хотим заменит, то
//         // в результат кладем новое значение в виде строки - newValue
//         else result = result + $"{text[i]}"; //Если совпадений не обнаружено то в result добавляем текщий символ, тот который и был
//     }
//     return result;

// }
//     string newText = Replace(text, ' ', '|');// в скобках - что на что меняем
//     Console.WriteLine(newText);
//     Console.WriteLine(); // Выводим пустую строку для разделения текста(просто для удобства восприятия)
//     newText = Replace(newText, 'к', 'К');
//     Console.WriteLine(newText); // Показывает результат( новый текст с заменой)
//     Console.WriteLine(); // Выводим пустую строку для разделения текста(просто для удобства восприятия)
//     newText = Replace(newText, 'с', 'С');
//     Console.WriteLine(newText); 


// Упорядочить данные внутри массива
// Алгоритм сортировки методом вывбора(метод min max)
// Алгоритм:
// 1. Найти позицию минимального элемента в неотсортированой части массива
// 2. Произвести обмен этого значения с со значением первой неотсортированой позиции
// 3. Повторять пока есть не отсортированые элементы

int [] arr = {1, 5, 4, 3, 2, 6, 7, 1, 1}; // задали(определили) массив с целочисленными значениями (тип переменной int)
// Первый этап - подзадача вывода массива на экран
void PrintArray(int[] array)
{
    int count = array.Length; // Получаем кол-во элементов
    for (int i = 0; i < count; i++) // Пробегаем по всем элементам массива
    {
        Console.Write($"{array[i]} "); // Показываем на экране
    }
    Console.WriteLine(); // вывод пустой строки для рзделения(удобства отображения)
    }

//PrintArray(arr);// это мы просто тестировали, далее эту строку удаляем из программы
// Второй этап, пишем метод который будет упорядочивать массив
void SelectionSort(int[] array)
{
    for (int i = 0; i < array.Length - 1; i++) // Пробегаемся по всем элементам масива. -1 искуственно отнимаем, так как в цикле for далее +1
    {
    int minPosition = i; // определяем позицию для рабочего элемента
    for(int j = i + 1; j < array.Length; j++)// ищем минимальынй элемент, проходим от элемента j+1(так как j уже определен) до последнего
    {
        if(array[j] < array[minPosition]) // сравнимаем текущий элемент с минимальным и опредеяем минимальный
        {
            minPosition = j;
    }
    }
    int  temp = array[i]; // задаем переменную через которую производим обмен значений переменных, кладем в нее значение из array[i]
    array[i] = array[minPosition]; // В array [i] кладем мин найденое значение
    array[minPosition] = temp; // значение из temp кладем в array[minPosition]
}
}
PrintArray(arr);
SelectionSort(arr);

PrintArray(arr);